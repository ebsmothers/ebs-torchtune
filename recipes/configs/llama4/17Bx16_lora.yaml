# Config for multi-device LoRA finetuning in lora_finetune_distributed.py
# using a Llama4 17Bx16 MoE model
#
# To launch on 8 devices, run the following command from root:
#   tune run --nproc_per_node 8 lora_finetune_distributed --config llama4/17Bx16_lora
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nproc_per_node 8 lora_finetune_distributed --config llama4/17B_lora checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config is only tested on an 8xA100 machine.
#

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama4.llama4_transform
  # TODO(llama4-release): update the tokenizer path before formal release
  # path: /mnt/wsfuse/tokenizers/tiktoken/l4_200k_base
  path: /home/rafiayub/pci-wsf/tokenizers/tiktoken/l4_200k_base
  max_seq_len: null

# Dataset
# Text dataset
dataset:
  _component_: torchtune.datasets.alpaca_dataset
  packed: False

# Image dataset
# dataset:
#   _component_: torchtune.datasets.multimodal.the_cauldron_dataset
#   packed: False
#   subset: ocrvqa
# collate_fn: torchtune.data.padded_collate_tiled_images_and_mask

# Speech dataset
# dataset:
#   _component_: torchtune.datasets.multimodal.librispeech_asr_dataset
#   subset: clean
#   split: train.100
#   packed: False
# collate_fn: torchtune.data.padded_collate_speech
seed: null
shuffle: True


# Model Arguments
model:
  _component_: torchtune.models.llama4.lora_llama4_17bx16
  lora_attn_modules: ['q_proj', 'v_proj', 'output_proj']
  apply_lora_to_mlp: True
  apply_lora_to_output: False
  lora_rank: 16  # higher increases accuracy and memory
  lora_alpha: 32  # usually alpha=2*rank
  lora_dropout: 0.0

checkpointer:
  _component_: torchtune.training.FullModelMetaCheckpointer
  # loading large ckpt from local is much faster than loading from pci-wsf
  # the equivalent pci-wsf path: /home/<username>/pci-wsf/jessicazhong/checkpoints/17b_moe_text_mp1pp1_non_te/
  # TODO(llama4-release): update the weights path before formal release
  checkpoint_dir: /home/rafiayub/checkpoints/17b_moe_svt_mp1pp1_non_te/
  checkpoint_files: [consolidated_with_vision_and_speech_encoder_weights.00.pth]
  recipe_checkpoint: null
  output_dir: /tmp/Llama-4-17B/
  model_type: LLAMA4
resume_from_checkpoint: False

# Fine-tuning arguments
batch_size: 1
epochs: 1
optimizer:
  _component_: torch.optim.AdamW
  lr: 2e-5
  fused: True
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 100
loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss
# clip_grad_norm: 1.0
max_steps_per_epoch: 1000
gradient_accumulation_steps: 1
optimizer_in_bwd: False

# Training env
device: cuda

# Memory management
enable_activation_checkpointing: False
enable_activation_offloading: False
custom_sharded_layers: ['tok_embeddings']
fsdp_cpu_offload: False
compile: False # torch.compile, set to true for perf/memory improvement

# Reduced precision
dtype: bf16

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.WandBLogger
  log_dir: ${output_dir}

output_dir: /tmp/lora-llama4-finetune
log_every_n_steps: 1
log_peak_memory_stats: True

# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: True
  with_stack: True
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 1
  warmup_steps: 2
  active_steps: 1
  num_cycles: 1
